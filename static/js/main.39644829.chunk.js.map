{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robotsCards","robots","map","robot","key","SearchBox","searchValue","onSearchChange","type","placeholder","value","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","App","handleSearchChange","bind","fetch","then","response","json","e","target","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACtB,OACI,yBAAKC,UAAU,gDACX,6BACI,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,6BACI,4BAAKC,IAET,2BAAIC,MCKLI,MAZf,YAA+B,IACrBC,EADoB,EAAVC,OACWC,KAAI,SAAAC,GAAK,OAChC,kBAAC,EAAD,CACIC,IAAKD,EAAMV,GACXA,GAAIU,EAAMV,GACVC,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,WAGrB,OAAO,6BAAMK,ICIFK,MAdf,YAAqD,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,eAC9B,OACI,6BACI,2BACIX,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,MAAOJ,EACPK,SAAUJ,MCeXK,EAvBf,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,UAAU,GAJC,EADvB,+EASsBC,EAAOC,GACrBC,KAAKC,SAAS,CACVJ,UAAU,MAXtB,+BAgBQ,OAAIG,KAAKJ,MAAMC,SACJ,6DAEJG,KAAKL,MAAMO,aAnB1B,GAAmCC,aC+DpBC,E,YA1DX,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTb,OAAQ,GACRK,YAAa,IAGjB,EAAKiB,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBARX,E,iFAWE,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAzB,GAAM,OACR,EAAKkB,SAAS,CACVlB,OAAQA,S,yCAKL4B,GACf,IAAMvB,EAAcuB,EAAEC,OAAOpB,MAE7BQ,KAAKC,SAAS,CACVb,YAAaA,M,+BAIX,IAAD,EAC2BY,KAAKJ,MAA7Bb,EADH,EACGA,OAAQK,EADX,EACWA,YACVyB,EAAiB9B,EAAO+B,QAAO,SAAA7B,GACjC,OAAOA,EAAMT,KAAKuC,cAAcC,SAAS5B,EAAY2B,kBAEzD,OAAOF,EAAeI,OAClB,yBAAKvC,UAAU,MACX,2CACA,kBAAC,EAAD,CACIU,YAAaY,KAAKJ,MAAMR,YACxBC,eAAgBW,KAAKK,qBAEzB,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUtB,OAAQ8B,MAI1B,yBAAKnC,UAAU,MACX,2CACA,kBAAC,EAAD,CACIU,YAAaY,KAAKJ,MAAMR,YACxBC,eAAgBW,KAAKK,qBAEzB,gD,GArDEF,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.39644829.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n            <div>\r\n                <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                </div>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nfunction CardList({ robots }) {\r\n    const robotsCards = robots.map(robot => (\r\n        <Card\r\n            key={robot.id}\r\n            id={robot.id}\r\n            name={robot.name}\r\n            email={robot.email}\r\n        />\r\n    ));\r\n    return <div>{robotsCards}</div>;\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nfunction SearchBox({ searchValue, onSearchChange }) {\r\n    return (\r\n        <div>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search robots'\r\n                value={searchValue}\r\n                onChange={onSearchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nexport class ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. Something went wrong.</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n// import Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            robots: [],\r\n            searchValue: ''\r\n        };\r\n\r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(robots =>\r\n                this.setState({\r\n                    robots: robots\r\n                })\r\n            );\r\n    }\r\n\r\n    handleSearchChange(e) {\r\n        const searchValue = e.target.value;\r\n\r\n        this.setState({\r\n            searchValue: searchValue\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchValue } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchValue.toLowerCase());\r\n        });\r\n        return filteredRobots.length ? (\r\n            <div className='tc'>\r\n                <h1>RoboFriends</h1>\r\n                <SearchBox\r\n                    searchValue={this.state.searchValue}\r\n                    onSearchChange={this.handleSearchChange}\r\n                />\r\n                <ErrorBoundary>\r\n                    <CardList robots={filteredRobots} />\r\n                </ErrorBoundary>\r\n            </div>\r\n        ) : (\r\n            <div className='tc'>\r\n                <h1>RoboFriends</h1>\r\n                <SearchBox\r\n                    searchValue={this.state.searchValue}\r\n                    onSearchChange={this.handleSearchChange}\r\n                />\r\n                <div>Loading...</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4. \n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}